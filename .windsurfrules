### Project Awareness & Context

- **Always read `PLANNING.md`** at the start of a new conversation to understand the project's architecture, goals, style, and constraints.
- **Check `TASK.md`** before starting a new task. If the task isn’t listed, add it with a brief description and today's date.
- **Use consistent naming conventions, file structure, and architecture patterns** as described in `PLANNING.md`.

### Code Structure & Modularity

- **Never create a file longer than 500 lines of code.** If a file approaches this limit, refactor by splitting it into modules or helper files.
- **Organize code into clearly separated modules**, grouped by feature or responsibility.
- **Use clear, consistent imports** (prefer relative imports within packages).

### context7

- **Always use the context7 MCP server** to reference documentation or examples.
- For the tokens, **start with 5000** but then increase to **20000** if your first search didn't give relevant documentation.
- **Only search three times maximum for any specific piece of documentation** If you don't get what you need, use the .brave-search MCP server to perform a wider search.

### brave-search

- Use the `brave-search` MCP server to perform a wider search.
- Rate limit: 1 requests per second, so let delay be between 1 and 2 seconds.

### Testing & Reliability

#### For Docker environment

- **Always create local test environment** along with staging and production environment.

#### For Programming Languages

- **Always create unit tests for new features** (functions, classes, routes, etc).
- **After updating any logic**, check whether existing unit tests need to be updated. If so, do it.
- **Tests should live in a `/tests` folder** mirroring the main app structure.
  - Include at least:
    - 1 test for expected use
    - 1 edge case
    - 1 failure case

#### Task Completion

- **Mark completed tasks in `TASK.md`** immediately after finishing them.
- Add new sub-tasks or TODOs discovered during development to `TASK.md` under a “Discovered During Work” section.

### Style & Conventions

- **Use consistent naming conventions** for variables, functions, classes, and files.
- **Follow established coding standards** and best practices.